Файлы могут быть текстовые (содержание текст) и бинарнные или двоичные (например mp.3
gif, gpeg, etc).

Режимы:
r (read) - чтение
w (write) - запись (содержимое стирается)
a (append) - запись в конец
b (binary) - открыть в бинарном режиме
t (test) - открыть в тестовом режиме
r+ открыть для чтения и записи
w+ - открыть для чтения и записи, содержимое файла стирается
Можно сочетать режимы напр. rb - чтение в бинарном формате

Построчное чтение файлов:

with open('input.txt') as inf:
    for line in inf:
        line = line.strip()    #убираем экранированные символы в конце и начале строки
        print(line)
Кнструкция with гарантирует что интерпритатор закроет файл в независимости от того
проихойдет ошибка внутри with или нет. Поэтому так рекоментуется работать с файлами

Красивый способ переписать содержимое одного файла в другой:
with open('test.txt') as f, open('test_copy.txt', 'w') as w:
    for line in f:
        w.write(line)


Запись в файл:
ouf = open('file.txt', 'w')
ouf.write('Some text \n')
ouf.write(str(25))    # преобразовывем типы данных в строку
...
ouf.close()

или 

with open('file.txt', 'w') as ouf:
    ouf.write('Some text \n')
    ...

# здесь файл уже закрыт

Функция open возврацает нам object. Чтобы освобождать системные ресурсы, которые
были потрачены на соединение с файлом файл нужно закрывать.

str.splitlines( num=string.count('\n')) - The method splitlines() returns a list
with all the lines in string, optionally including the line breaks (if num is supplied and is true)
