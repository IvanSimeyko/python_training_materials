Функция в которой вместо return используем yield и которая вместо того чтобы возврацать
значение, будет генерировать его по одному, т.е. мы можем вернуть значение из функции
сразу несколько раз. Т.о. генерируется концепция отложенного исполнения.

Пример:
>>> from random import random
>>> def random__gen(k):
       """
       Функция, которая генерирет 5 случайных чисел из диапозаона 0, 1
       """
...     for i in range(k):
...         yield random()

Запрос у генератора вернуть следующее значение происходит с помощью вызова функции next()
Когда мы вызываем функцию с ключевымм словом yield внутри, то нам возврацается объект
генератор (не функция!!!). Этот объект-генератор знает все тело нашей функции и исполнение
его тела функции начнется только тогда, когда мы попросим следующий элемент. Каждый раз
тело функции до первого ключевого слова yield.

Пример
>>> def simple_gen():
...     print('checkpoint 1')
...     yield 1
...     print('checkpoint 2')
...     yield 2
...     print('checkpoint 3')

>>> gen = simple_gen()
>>> x = next(gen)
checkpoint 1
>>> print(x)
1
>>> x = next(gen)
checkpoint 2
>>> print(x)
2
>>> x = next(gen)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
StopIteration
checkpoint 3

Что произойдет если мы используем слово return внутри генератора
