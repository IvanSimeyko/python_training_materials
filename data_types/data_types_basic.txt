Объект это некоторый контейнер (ящик) в памяти (склад), который содержит данные

Переменная создается присваиванием (т.е. переменная а ссылается на объект 1)
a = 1

Изменяемые (mutable) типы - list, dictionary, set
Неизменяемые (immutable) типы - int, float, complex, bool, tuple, string, frozenset
Одинаковые неизменяемые объекты всегда ссылаются на один объект.
>>> x = 1
>>> y = 1
>>> x is y
True
Для изменяемых объектов все честнее:
>>> x = []
>>> y = []
>>> x is y
False

Если интерпритатор встречает число он создает объект.
Если встречает список - создает по объекту для каждого элемента списка, затем объект для самого списка
>> d = [0, 3, 5]
>>> id(d)
37192728
>>> id(d[0])
30635676
С кортежами,словарями тоже что и для списка. Строки это просто символы в юникоде.

Часть имен зарезервирована
import keyword
print(keyword.kwlist)

Типизация динамическая - тип связыватеся с объектом. Переменные хранят ссылки на объекты в виде значений.
Переменные на которые нет ссылок автоматически освовождаются из опереативной памяти системой "сборк мусора".

Для двух разных объектов идентификатор объекта всегда разный. И наоборот
b = 1
print(id(a) == id(b))     # True
c = 2
print(id(a) == id(c))    # False

Слудует помнить, что оператор is сравнивает идентификатор объектов

Строгая типизация - не производится автоматических приведений типов в операциях (кроме очеивидных int=float)
err = 1 + '2'     # TypeErrorgchro

Тип объекта не меняется в течение жизни объекта. Узнать тип объекта:
>>> type(1,2,3)
<type 'list'>
>>> type(type(x))
<type 'type'>

Каждый объект, созданный в оперативной памяти, содержит счетчик ссылок - он знает сколько переменных на него ссылаются.
Когда счетчик ссылок равен 0, объект удаляется из оперативной памяти сборщиком мусора.