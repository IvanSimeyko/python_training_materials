# Цикл for - способен работать с любыми итерируемыми объектами.
# Итеририуемый объект - ели он физически является последовательностью,
#  или если он является объектом который воспроизводит по одному результату за раз
# в контекте интрументов выполнения итераций

for x in 'spam':
    print(x*2, end=' ')

#Протокол иттераций - при помощи функции iter() получаем итератор из
#  итерируемого объекта, который реализует  метод __next__, возвращающий следующее
# значение и возбуждающий  исключение StopIteration в конце серии результатов

#В Python 3 у итерируемых объектов метод next() заменили на __next__() Функция next() осталась

L = [1,2,3]
a =  iter(L) in L
print ('\n', a)

I = iter(L)
print(I.__next__())
print(next(I))

# Итараторы имеют файлы, последовательности (списки, кортежи, строки), словари
D = {'a': 1, 'b': 2, 1: 3}
for key in D.keys():
    print(key, D[key])
